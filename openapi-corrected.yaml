---
openapi: 3.0.3
info:
  title: Wagtail
  description: Wagtail is stream based socket and http service that supports integration of different services such as SR or Emotion.
  version: 1.0.0
  contact: {}
servers:
  - url: "http://localhost:14530"
paths:
  /readiness:
    get:
      tags:
        - Health
      summary: Readiness
      description: Readiness
      operationId: readiness
      responses:
        "200":
          description: Readiness
          content:
            application/json:
              schema:
                type: object
                properties:
                  ready:
                    type: string
                    example: "true"
              examples:
                Readiness:
                  value:
                    ready: "true"
  /liveness:
    get:
      tags:
        - Health
      summary: Liveness
      description: Liveness
      operationId: liveness
      responses:
        "200":
          description: Liveness
          content:
            application/json:
              schema:
                type: object
                properties:
                  alive:
                    type: string
                    example: "true"
              examples:
                Liveness:
                  value:
                    alive: "true"
  /projects:
    get:
      tags:
        - Project
      summary: Get Projects
      description: Get Projects
      operationId: getProjects
      responses:
        "200":
          description: Get Projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  project-count:
                    type: number
                    example: 1
                  projects:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                          example: 1
                        name:
                          type: string
                          example: stream-wasp
                        tenant:
                          type: string
                          example: Default
                    example:
                      - id: 1
                        name: stream-wasp
                        tenant: Default
              examples:
                Get Projects:
                  value:
                    project-count: 1
                    projects:
                      - id: 1
                        name: stream-wasp
                        tenant: Default
    post:
      tags:
        - Project
      summary: Add Project
      description: Add Project
      operationId: addProject
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  description: Wagtail specific JSON format for project.
                  type: string
                  example: "{\n\t\"project\":\n\t{\n\t\t\"name\":\"wasp\",\n\t\t\"nodes\":\n\t\t[\n\t\t\t{\"type\": \"distributor\", \"id\": \"entry\", \"raw-audio-targets\":[\"audio-separator-1\"]},\n\t\t\t\n\t\t\t{\"type\": \"audio-channel-separator\", \"id\": \"audio-separator-1\", \"audio-targets\":[\"channel-audio-1\", \"channel-audio-2\"]},\n\t\t\t\n\t\t\t{\"type\": \"distributor\", \"id\": \"channel-audio-1\", \"audio-targets\":[\"vad-1\", \"vad-for-language-1\"]},\n\t\t\t{\"type\": \"distributor\", \"id\": \"channel-audio-2\", \"audio-targets\":[\"vad-2\", \"vad-for-language-2\"]},\n\t\t\t\n\t\t\t{\"type\": \"vad\", \"id\": \"vad-for-language-1\", \"config\": {\"sensitivity\":0.99, \"pre-speech-buffer-msec\": 250, \"post-speech-buffer-msec\":250, \"max-speech-duration-msec\": 10000, \"silence-trigger-msec\": 500}, \"event-targets\":[\"language-identifier-1\"], \"audio-targets\":[\"language-identifier-1\"]},\n\t\t\t{\"type\": \"vad\", \"id\": \"vad-for-language-2\", \"config\": {\"sensitivity\":0.99, \"pre-speech-buffer-msec\": 250, \"post-speech-buffer-msec\":250, \"max-speech-duration-msec\": 10000, \"silence-trigger-msec\": 500}, \"event-targets\":[\"language-identifier-2\"], \"audio-targets\":[\"language-identifier-2\"]},\n\t\t\t\n\t\t\t{\"type\": \"vad\", \"id\": \"vad-1\", \"config\": {\"sensitivity\":0.99, \"pre-speech-buffer-msec\": 250, \"post-speech-buffer-msec\":250}, \"event-targets\":[\"sr-1\", \"emotion-1\", \"gender-1\", \"age-1\"], \"audio-targets\":[\"sr-1\", \"emotion-1\", \"gender-1\", \"age-1\"]},\n\t\t\t{\"type\": \"vad\", \"id\": \"vad-2\", \"config\": {\"sensitivity\":4, \"pre-speech-buffer-msec\": 250, \"post-speech-buffer-msec\":250}, \"event-targets\":[\"sr-2\", \"emotion-2\", \"gender-2\", \"age-2\"], \"audio-targets\":[\"sr-2\", \"emotion-2\", \"gender-2\", \"age-2\"]},\n\t\t\t\n\t\t\t{\"type\": \"sr\", \"id\": \"sr-1\", \"config\":{\"address\":\"http://core-sr\", \"connection-timeout-msec\": 5000, \n\t\t\t\t\"model\": {\"tenant\": \"Default\", \"name\": \"TurkishGeneral\", \"version\":\"1\"}}, \"event-targets\":[\"punctuation-1\", \"exit\"]},\n\t\t\t{\"type\": \"sr\", \"id\": \"sr-2\", \"config\":{\"address\":\"http://core-sr\", \"connection-timeout-msec\": 5000, \n\t\t\t\t\"model\": {\"tenant\": \"Default\", \"name\": \"TurkishGeneral\", \"version\":\"1\"}}, \"event-targets\":[\"punctuation-2\", \"exit\"]},\n\t\t\t\t\n\t\t\t{\"type\": \"emotion\", \"id\": \"emotion-1\", \"config\":{\"address\":\"http://192.168.10.201:45679\"}, \"event-targets\":[\"exit\"]},\n\t\t\t{\"type\": \"emotion\", \"id\": \"emotion-2\", \"config\":{\"address\":\"http://192.168.10.201:45679\"}, \"event-targets\": [\"exit\"]},\n\t\t\t\n\t\t\t{\"type\": \"gender\", \"id\": \"gender-1\", \"config\":{\"address\":\"http://192.168.10.128:45678\", \"confidence-threshold\":0.8 }, \"event-targets\":[\"exit\"]},\n\t\t\t{\"type\": \"gender\", \"id\": \"gender-2\", \"config\":{\"address\":\"http://192.168.10.128:45678\"}, \"event-targets\": [\"exit\"]},\t\t\n\t\t\t\n\t\t\t{\"type\": \"age\", \"id\": \"age-1\", \"config\":{\"address\":\"http://192.168.10.128:45678\"}, \"event-targets\":[\"exit\"]},\n\t\t\t{\"type\": \"age\", \"id\": \"age-2\", \"config\":{\"address\":\"http://192.168.10.128:45678\"}, \"event-targets\":[\"exit\"]},\n\t\t\t\n\t\t\t{\"type\": \"language-identifier\", \"id\": \"language-identifier-1\", \"config\":{\"address\":\"http://192.168.10.203:5143\"}, \"event-targets\":[\"exit\"]},\t\n\t\t\t{\"type\": \"language-identifier\", \"id\": \"language-identifier-2\", \"config\":{\"address\":\"http://192.168.10.203:5143\"}, \"event-targets\":[\"exit\"]},\n\t\t\t\n\t\t\t{\"type\": \"punctuation\", \"id\": \"punctuation-1\", \"config\":{\"address\": \"http://punc.sestek.com:6081\", \"use-ssl\": true}, \"event-targets\":[\"exit\"]},\n\t\t\t{\"type\": \"punctuation\", \"id\": \"punctuation-2\", \"config\":{\"address\": \"http://punc.sestek.com:6081\", \"use-ssl\": true}, \"event-targets\": [\"exit\"]},\n\t\t\t\n\t\t\t{\"type\": \"result-generator\", \"id\": \"exit\"}\n\t\t]\n\t}\n}"
                diagram:
                  description: "Diagram specific JSON format for project. Giving '{}' is enuogh."
                  type: string
                  example: "{}"
      responses:
        "200":
          description: Add Project
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    example: 1
              examples:
                Add Project:
                  value:
                    id: 1
  "/projects/{id}":
    get:
      tags:
        - Project
      summary: Get Project
      description: Get Project
      operationId: getProject
      responses:
        "200":
          description: Get Project
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: object
                    properties:
                      project:
                        type: object
                        properties:
                          name:
                            type: string
                            example: stream-wasp
                          nodes:
                            type: array
                            items: {}
                            example: []
                  diagram:
                    type: object
                    properties: {}
                  id:
                    type: number
                    example: 1
                  name:
                    type: string
                    example: stream-wasp
                  tenant:
                    type: string
                    example: Default
              examples:
                Get Project:
                  value:
                    content:
                      project:
                        name: stream-wasp
                        nodes: []
                    diagram: {}
                    id: 1
                    name: stream-wasp
                    tenant: Default
        "500":
          description: Get Project
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    type: string
                    example: "The project with id '101' was not found."
              examples:
                Get Project:
                  value:
                    errorMessage: "The project with id '101' was not found."
    delete:
      tags:
        - Project
      summary: Delete Project
      description: Delete Project
      operationId: deleteProject
      responses:
        "200":
          description: Delete Project
          content:
            text/plain:
              examples:
                Delete Project:
                  value: ""
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: "1"
        description: Id of the project.
  /nodes:
    get:
      tags:
        - Node
      summary: Get Nodes
      description: Get Nodes
      operationId: getNodes
      responses:
        "200":
          description: Get Nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  node-count:
                    type: number
                    example: 1
                  nodes:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                          example: 1
                        name:
                          type: string
                          example: SR-websocket
                        project-id:
                          type: number
                          example: -1
                        specifications:
                          type: string
                          example: "{}"
                        tenant:
                          type: string
                          example: Default
                        type:
                          type: string
                          example: sr-websocket
                    example:
                      - id: 1
                        name: SR-websocket
                        project-id: -1
                        specifications: "{}"
                        tenant: Default
                        type: sr-websocket
              examples:
                Get Nodes:
                  value:
                    node-count: 1
                    nodes:
                      - id: 1
                        name: SR-websocket
                        project-id: -1
                        specifications: "{}"
                        tenant: Default
                        type: sr-websocket
    post:
      tags:
        - Node
      summary: Add Node
      description: Add Node
      operationId: addNode
      responses:
        "200":
          description: Add Node
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    example: 1
              examples:
                Add Node:
                  value:
                    id: 1
  "/nodes/{id}":
    get:
      tags:
        - Node
      summary: Get Node
      description: Get Node
      operationId: getNode
      responses:
        "200":
          description: Get Node
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    example: 1
                  name:
                    type: string
                    example: SR-websocket
                  project-id:
                    type: number
                    example: -1
                  specifications:
                    type: string
                    example: "{}"
                  tenant:
                    type: string
                    example: Default
                  type:
                    type: string
                    example: sr-websocket
              examples:
                Get Node:
                  value:
                    id: 1
                    name: SR-websocket
                    project-id: -1
                    specifications: "{}"
                    tenant: Default
                    type: sr-websocket
    delete:
      tags:
        - Node
      summary: Delete Node
      description: Delete Node
      operationId: deleteNode
      responses:
        "200":
          description: Delete Node
          content:
            text/plain:
              examples:
                Delete Node:
                  value: ""
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: "1"
        description: Id of the node.
  /scripts:
    get:
      tags:
        - Script
      summary: Get Node Scripts
      description: Get Node Scripts
      operationId: getNodeScripts
      parameters:
        - name: node-id
          in: query
          schema:
            type: string
            example: "1"
          description: Node id for getting its scripts.
      responses:
        "200":
          description: Get Node Scripts
          content:
            application/json:
              schema:
                type: object
                properties:
                  script-count:
                    type: number
                    example: 1
                  scripts:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                          example: 1
                        name:
                          type: string
                          example: custom_script_js
                        tenant:
                          type: string
                          example: Default
                        type:
                          type: string
                          example: node
                    example:
                      - id: 1
                        name: custom_script_js
                        tenant: Default
                        type: node
              examples:
                Get Node Scripts:
                  value:
                    script-count: 1
                    scripts:
                      - id: 1
                        name: custom_script_js
                        tenant: Default
                        type: node
    post:
      tags:
        - Script
      summary: Add Script
      description: Add Script
      operationId: addScript
      requestBody:
        content:
          text/plain:
            example: "var CustomNode = function ()\r\n{\r\n  this._serviceName = 'custom-node'\r\n  this._eventName = 'custom-event'\r\n}\r\n\r\nCustomNode.prototype.OnAudio = function (channelIndex, samples, sampleCount)\r\n{\r\n}\r\n\r\nCustomNode.prototype.OnEvent = function (channelIndex, serviceName, eventName, data)\r\n{\r\n  var return_data = { 'data': 1 }\r\n  var event = new EventInformation(channelIndex, this._serviceName, this._eventName, JSON.stringify(return_data));\r\n  nodeCustom.SendEvent(event);\r\n}\r\n\r\nCreateNode = function ()\r\n{\r\n  return new CustomNode();\r\n}\r\n"
      responses:
        "200":
          description: Add Script
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    example: 1
              examples:
                Add Script:
                  value:
                    id: 1
  "/scripts/{id}":
    get:
      tags:
        - Script
      summary: Get Script
      description: Get Script
      operationId: getScript
      responses:
        "200":
          description: Get Script
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
                    example: "{var CustomNode = function ()\r\n{\r\n  this._serviceName = 'custom-node'\r\n  this._eventName = 'custom-event'\r\n}\r\n\r\nCustomNode.prototype.OnAudio = function (channelIndex, samples, sampleCount)\r\n{\r\n}\r\n\r\nCustomNode.prototype.OnEvent = function (channelIndex, serviceName, eventName, data)\r\n{\r\n  var return_data = { 'data': 1 }\r\n  var event = new EventInformation(channelIndex, this._serviceName, this._eventName, JSON.stringify(return_data));\r\n  nodeCustom.SendEvent(event);\r\n}\r\n\r\nCreateNode = function ()\r\n{\r\n  return new CustomNode();\r\n}\r\n}"
                  id:
                    type: number
                    example: 1
                  name:
                    type: string
                    example: custom_script_js
                  tenant:
                    type: string
                    example: Default
                  type:
                    type: string
                    example: node
              examples:
                Get Script:
                  value:
                    content: "{var CustomNode = function ()\r\n{\r\n  this._serviceName = 'custom-node'\r\n  this._eventName = 'custom-event'\r\n}\r\n\r\nCustomNode.prototype.OnAudio = function (channelIndex, samples, sampleCount)\r\n{\r\n}\r\n\r\nCustomNode.prototype.OnEvent = function (channelIndex, serviceName, eventName, data)\r\n{\r\n  var return_data = { 'data': 1 }\r\n  var event = new EventInformation(channelIndex, this._serviceName, this._eventName, JSON.stringify(return_data));\r\n  nodeCustom.SendEvent(event);\r\n}\r\n\r\nCreateNode = function ()\r\n{\r\n  return new CustomNode();\r\n}\r\n}"
                    id: 1
                    name: custom_script_js
                    tenant: Default
                    type: node
        "500":
          description: Get Script
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    type: string
                    example: "The script with id '101' was not found."
              examples:
                Get Script:
                  value:
                    errorMessage: "The script with id '101' was not found."
    delete:
      tags:
        - Script
      summary: Delete Script
      description: Delete Script
      operationId: deleteScript
      responses:
        "200":
          description: Delete Script
          content:
            text/plain:
              examples:
                Delete Script:
                  value: ""
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: "1"
        description: Id of the script.
  /nodescripts:
    post:
      tags:
        - Script
      summary: Add Node Scripts
      description: Add Node Scripts
      operationId: addNodeScripts
      responses:
        "200":
          description: Add Node Scripts
          content:
            text/plain:
              examples:
                Add Node Scripts:
                  value: ""
    delete:
      tags:
        - Script
      summary: Delete Node Scripts
      description: Delete Node Scripts
      operationId: deleteNodeScripts
      responses:
        "200":
          description: Delete Node Scripts
          content:
            text/plain:
              examples:
                Delete Node Scripts:
                  value: ""
  /maestro:
    post:
      tags:
        - Maestro
      summary: Maestro
      description: Maestro
      operationId: maestro
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                audio:
                  description: A wav file as audio.
                  type: string
                  format: binary
                config:
                  description: JSON for the configuration.
                  type: string
                  example: "{ \n\"config\":\n{\n\t\"nodes\":\n\t[\n\t\t{\n\t\t\t\"id\": \"emotion-1\",\n\t\t\t\"config\":\t\t\n\t\t\t{\n\t\t\t\t\"enabled\": false\t\t\t\t\n\t\t\t}\t\n\t\t}\n\t]\n}\n}"
      responses:
        "200":
          description: Maestro
          content:
            application/json:
              schema:
                type: object
                properties:
                  error-message:
                    type: string
                    example: ""
                  results:
                    nullable: true
                    example: ~
                  status:
                    type: string
                    example: ok
              examples:
                Maestro:
                  value:
                    error-message: ""
                    results: ~
                    status: ok
        "422":
          description: Maestro
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    type: string
                    example: ""
              examples:
                Maestro:
                  value:
                    errorMessage: ""
  /metrics:
    get:
      tags:
        - Metrics
      summary: Metrics
      description: Metrics
      operationId: metrics
      responses:
        "200":
          description: Metrics
          content:
            text/plain:
              examples:
                Metrics:
                  value: "# HELP sestek_current_sessions_total number of opened and not yet closed websocket sessions\n# TYPE sestek_current_sessions_total gauge\nsestek_current_sessions_total{protocol=\"websocket\"} 0.000000\n# HELP sestek_served_sessions_total number of sessions that has been closed\n# TYPE sestek_served_sessions_total counter\nsestek_served_sessions_total{protocol=\"websocket\"} 13.000000\n# HELP sestek_wagtail_requested_project_total total number of times a project has been used\n# TYPE sestek_wagtail_requested_project_total counter\nsestek_wagtail_requested_project_total{project-name=\"Default_http-diarize-lang-sr\"} 1.000000\n# HELP sestek_wagtail_requested_project_total total number of times a project has been used\n# TYPE sestek_wagtail_requested_project_total counter\nsestek_wagtail_requested_project_total{project-name=\"Default_lang1\"} 1.000000\n# HELP sestek_wagtail_requested_project_total total number of times a project has been used\n# TYPE sestek_wagtail_requested_project_total counter\nsestek_wagtail_requested_project_total{project-name=\"Default_stream-wasp\"} 12.000000\n# HELP sestek_wagtail_current_project_session_total current open number of sessions for a project\n# TYPE sestek_wagtail_current_project_session_total counter\nsestek_wagtail_current_project_session_total{project-name=\"lang1\"} 0.000000\n# HELP sestek_wagtail_current_project_session_total current open number of sessions for a project\n# TYPE sestek_wagtail_current_project_session_total counter\nsestek_wagtail_current_project_session_total{project-name=\"stream-wasp\"} 0.000000\n"
tags:
  - name: Health
    description: REST APIs for readiness and liveliness status of Wagtail service.
  - name: Project
    description: Projects are collection of nodes and links between nodes.
  - name: Node
    description: "Nodes are representation of services that can have configurations. Also, there are utility nodes for helping internal process of Wagtail service."
  - name: Script
    description: JavaScript for writing custom program for nodes.
  - name: Maestro
    description: Maestro.
  - name: Metrics
    description: Statistics for Wagtail service such as total request of different types.
