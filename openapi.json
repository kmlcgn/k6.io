{
  "openapi": "3.0.0",
  "info": {
    "title": "Wagtail",
    "description": "Wagtail is stream based socket and http service that supports integration of different services such as SR or Emotion.",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Health",
      "description": "REST APIs for readiness and liveliness status of Wagtail service."
    },
    {
      "name": "Project",
      "description": "Projects are collection of nodes and links between nodes."
    },
    {
      "name": "Node",
      "description": "Nodes are representation of services that can have configurations. Also, there are utility nodes for helping internal process of Wagtail service."
    },
    {
      "name": "Script",
      "description": "JavaScript for writing custom program for nodes."
    },
    {
      "name": "Maestro",
      "description": "Maestro."
    },
    {
      "name": "Metrics",
      "description": "Statistics for Wagtail service such as total request of different types."
    }
  ],
  "paths": {
    "/readiness": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Readiness",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "ready": "true"
                }
              }
            }
          }
        }
      }
    },
    "/liveness": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Liveness",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "alive": "true"
                }
              }
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Projects",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "project-count": 1,
                  "projects": [
                    {
                      "id": 1,
                      "name": "stream-wasp",
                      "tenant": "Default"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Add Project",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "number",
                    "description": "Wagtail specific JSON format for project.",
                    "example": "{\n\t\"project\":\n\t{\n\t\t\"name\":\"wasp\",\n\t\t\"nodes\":\n\t\t[\n\t\t\t{\"type\": \"distributor\", \"id\": \"entry\", \"raw-audio-targets\":[\"audio-separator-1\"]},\n\t\t\t\n\t\t\t{\"type\": \"audio-channel-separator\", \"id\": \"audio-separator-1\", \"audio-targets\":[\"channel-audio-1\", \"channel-audio-2\"]},\n\t\t\t\n\t\t\t{\"type\": \"distributor\", \"id\": \"channel-audio-1\", \"audio-targets\":[\"vad-1\", \"vad-for-language-1\"]},\n\t\t\t{\"type\": \"distributor\", \"id\": \"channel-audio-2\", \"audio-targets\":[\"vad-2\", \"vad-for-language-2\"]},\n\t\t\t\n\t\t\t{\"type\": \"vad\", \"id\": \"vad-for-language-1\", \"config\": {\"sensitivity\":0.99, \"pre-speech-buffer-msec\": 250, \"post-speech-buffer-msec\":250, \"max-speech-duration-msec\": 10000, \"silence-trigger-msec\": 500}, \"event-targets\":[\"language-identifier-1\"], \"audio-targets\":[\"language-identifier-1\"]},\n\t\t\t{\"type\": \"vad\", \"id\": \"vad-for-language-2\", \"config\": {\"sensitivity\":0.99, \"pre-speech-buffer-msec\": 250, \"post-speech-buffer-msec\":250, \"max-speech-duration-msec\": 10000, \"silence-trigger-msec\": 500}, \"event-targets\":[\"language-identifier-2\"], \"audio-targets\":[\"language-identifier-2\"]},\n\t\t\t\n\t\t\t{\"type\": \"vad\", \"id\": \"vad-1\", \"config\": {\"sensitivity\":0.99, \"pre-speech-buffer-msec\": 250, \"post-speech-buffer-msec\":250}, \"event-targets\":[\"sr-1\", \"emotion-1\", \"gender-1\", \"age-1\"], \"audio-targets\":[\"sr-1\", \"emotion-1\", \"gender-1\", \"age-1\"]},\n\t\t\t{\"type\": \"vad\", \"id\": \"vad-2\", \"config\": {\"sensitivity\":4, \"pre-speech-buffer-msec\": 250, \"post-speech-buffer-msec\":250}, \"event-targets\":[\"sr-2\", \"emotion-2\", \"gender-2\", \"age-2\"], \"audio-targets\":[\"sr-2\", \"emotion-2\", \"gender-2\", \"age-2\"]},\n\t\t\t\n\t\t\t{\"type\": \"sr\", \"id\": \"sr-1\", \"config\":{\"address\":\"http://core-sr\", \"connection-timeout-msec\": 5000, \n\t\t\t\t\"model\": {\"tenant\": \"Default\", \"name\": \"TurkishGeneral\", \"version\":\"1\"}}, \"event-targets\":[\"punctuation-1\", \"exit\"]},\n\t\t\t{\"type\": \"sr\", \"id\": \"sr-2\", \"config\":{\"address\":\"http://core-sr\", \"connection-timeout-msec\": 5000, \n\t\t\t\t\"model\": {\"tenant\": \"Default\", \"name\": \"TurkishGeneral\", \"version\":\"1\"}}, \"event-targets\":[\"punctuation-2\", \"exit\"]},\n\t\t\t\t\n\t\t\t{\"type\": \"emotion\", \"id\": \"emotion-1\", \"config\":{\"address\":\"http://192.168.10.201:45679\"}, \"event-targets\":[\"exit\"]},\n\t\t\t{\"type\": \"emotion\", \"id\": \"emotion-2\", \"config\":{\"address\":\"http://192.168.10.201:45679\"}, \"event-targets\": [\"exit\"]},\n\t\t\t\n\t\t\t{\"type\": \"gender\", \"id\": \"gender-1\", \"config\":{\"address\":\"http://192.168.10.128:45678\", \"confidence-threshold\":0.8 }, \"event-targets\":[\"exit\"]},\n\t\t\t{\"type\": \"gender\", \"id\": \"gender-2\", \"config\":{\"address\":\"http://192.168.10.128:45678\"}, \"event-targets\": [\"exit\"]},\t\t\n\t\t\t\n\t\t\t{\"type\": \"age\", \"id\": \"age-1\", \"config\":{\"address\":\"http://192.168.10.128:45678\"}, \"event-targets\":[\"exit\"]},\n\t\t\t{\"type\": \"age\", \"id\": \"age-2\", \"config\":{\"address\":\"http://192.168.10.128:45678\"}, \"event-targets\":[\"exit\"]},\n\t\t\t\n\t\t\t{\"type\": \"language-identifier\", \"id\": \"language-identifier-1\", \"config\":{\"address\":\"http://192.168.10.203:5143\"}, \"event-targets\":[\"exit\"]},\t\n\t\t\t{\"type\": \"language-identifier\", \"id\": \"language-identifier-2\", \"config\":{\"address\":\"http://192.168.10.203:5143\"}, \"event-targets\":[\"exit\"]},\n\t\t\t\n\t\t\t{\"type\": \"punctuation\", \"id\": \"punctuation-1\", \"config\":{\"address\": \"http://punc.sestek.com:6081\", \"use-ssl\": true}, \"event-targets\":[\"exit\"]},\n\t\t\t{\"type\": \"punctuation\", \"id\": \"punctuation-2\", \"config\":{\"address\": \"http://punc.sestek.com:6081\", \"use-ssl\": true}, \"event-targets\": [\"exit\"]},\n\t\t\t\n\t\t\t{\"type\": \"result-generator\", \"id\": \"exit\"}\n\t\t]\n\t}\n}"
                  },
                  "diagram": {
                    "type": "string",
                    "description": "Diagram specific JSON format for project. Giving '{}' is enuogh.",
                    "example": "{}"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": "Name of the new project.",
            "example": "wasp"
          },
          {
            "name": "tenant",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": "Tenant of the new project.",
            "example": "Default"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "id": 1
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Project",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Id of the project.",
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "content": {
                    "project": {
                      "name": "stream-wasp",
                      "nodes": []
                    }
                  },
                  "diagram": {},
                  "id": 1,
                  "name": "stream-wasp",
                  "tenant": "Default"
                }
              }
            }
          },
          "500": {
            "description": "internal-server-error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "errorMessage": "The project with id '101' was not found."
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete Project",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Id of the project.",
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {}
              }
            }
          }
        }
      }
    },
    "/nodes": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Get Nodes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "node-count": 1,
                  "nodes": [
                    {
                      "id": 1,
                      "name": "SR-websocket",
                      "project-id": -1,
                      "specifications": "{}",
                      "tenant": "Default",
                      "type": "sr-websocket"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Node"
        ],
        "summary": "Add Node",
        "requestBody": {
          "content": {}
        },
        "parameters": [
          {
            "name": "name",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": "Name of the new node.",
            "example": "TestNode1"
          },
          {
            "name": "tenant",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": "Tenant of the new node.",
            "example": "Default"
          },
          {
            "name": "type",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": "Type of the new node. Give 'custom-js' for custom nodes.",
            "example": "custom-js"
          },
          {
            "name": "project-id",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": "Give project id for project specific nodes, else -1.",
            "example": "-1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "id": 1
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{id}": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Get Node",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Id of the node.",
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "id": 1,
                  "name": "SR-websocket",
                  "project-id": -1,
                  "specifications": "{}",
                  "tenant": "Default",
                  "type": "sr-websocket"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Node"
        ],
        "summary": "Delete Node",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Id of the node.",
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {}
              }
            }
          }
        }
      }
    },
    "/scripts": {
      "get": {
        "tags": [
          "Script"
        ],
        "summary": "Get Node Scripts",
        "parameters": [
          {
            "name": "node-id",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Node id for getting its scripts.",
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "script-count": 1,
                  "scripts": [
                    {
                      "id": 1,
                      "name": "custom_script_js",
                      "tenant": "Default",
                      "type": "node"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Script"
        ],
        "summary": "Add Script",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": "var CustomNode = function ()\r\n{\r\n  this._serviceName = 'custom-node'\r\n  this._eventName = 'custom-event'\r\n}\r\n\r\nCustomNode.prototype.OnAudio = function (channelIndex, samples, sampleCount)\r\n{\r\n}\r\n\r\nCustomNode.prototype.OnEvent = function (channelIndex, serviceName, eventName, data)\r\n{\r\n  var return_data = { 'data': 1 }\r\n  var event = new EventInformation(channelIndex, this._serviceName, this._eventName, JSON.stringify(return_data));\r\n  nodeCustom.SendEvent(event);\r\n}\r\n\r\nCreateNode = function ()\r\n{\r\n  return new CustomNode();\r\n}\r\n"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": "Name for the script.",
            "example": "custom_script_js"
          },
          {
            "name": "type",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": "Either 'node' or 'utility'. 'node' type is the main script, 'utility' scripts are auxiliary scripts for 'node' scripts.",
            "example": "node"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "id": 1
                }
              }
            }
          }
        }
      }
    },
    "/scripts/{id}": {
      "get": {
        "tags": [
          "Script"
        ],
        "summary": "Get Script",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Id of the node.",
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "content": "{var CustomNode = function ()\r\n{\r\n  this._serviceName = 'custom-node'\r\n  this._eventName = 'custom-event'\r\n}\r\n\r\nCustomNode.prototype.OnAudio = function (channelIndex, samples, sampleCount)\r\n{\r\n}\r\n\r\nCustomNode.prototype.OnEvent = function (channelIndex, serviceName, eventName, data)\r\n{\r\n  var return_data = { 'data': 1 }\r\n  var event = new EventInformation(channelIndex, this._serviceName, this._eventName, JSON.stringify(return_data));\r\n  nodeCustom.SendEvent(event);\r\n}\r\n\r\nCreateNode = function ()\r\n{\r\n  return new CustomNode();\r\n}\r\n}",
                  "id": 1,
                  "name": "custom_script_js",
                  "tenant": "Default",
                  "type": "node"
                }
              }
            }
          },
          "500": {
            "description": "internal-server-error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "errorMessage": "The script with id '101' was not found."
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Script"
        ],
        "summary": "Delete Script",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Id of the script.",
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {}
              }
            }
          }
        }
      }
    },
    "/nodescripts": {
      "post": {
        "tags": [
          "Script"
        ],
        "summary": "Add Node Scripts",
        "requestBody": {
          "content": {}
        },
        "parameters": [
          {
            "name": "node-id",
            "in": "header",
            "schema": {
              "type": "integer"
            },
            "description": "Id of the node.",
            "example": "1"
          },
          {
            "name": "script-id",
            "in": "header",
            "schema": {
              "type": "integer"
            },
            "description": "Id of the script.",
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {}
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Script"
        ],
        "summary": "Delete Node Scripts",
        "parameters": [
          {
            "name": "node-id",
            "in": "header",
            "schema": {
              "type": "integer"
            },
            "description": "Id of the node.",
            "example": "1"
          },
          {
            "name": "script-id",
            "in": "header",
            "schema": {
              "type": "integer"
            },
            "description": "Id of the script.",
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {}
              }
            }
          }
        }
      }
    },
    "/maestro": {
      "post": {
        "tags": [
          "Maestro"
        ],
        "summary": "Maestro",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "audio": {
                    "type": "string",
                    "description": "A wav file as audio.",
                    "format": "binary"
                  },
                  "config": {
                    "type": "string",
                    "description": "JSON for the configuration.",
                    "example": "{ \n\"config\":\n{\n\t\"nodes\":\n\t[\n\t\t{\n\t\t\t\"id\": \"emotion-1\",\n\t\t\t\"config\":\t\t\n\t\t\t{\n\t\t\t\t\"enabled\": false\t\t\t\t\n\t\t\t}\t\n\t\t}\n\t]\n}\n}"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "project-name",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": "Name of the project.",
            "example": "http-diarize-lang-sr"
          },
          {
            "name": "tenant-name",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": "Tenant of the project.",
            "example": "Default"
          },
          {
            "name": "services",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": "Services list that seperated by ', '.",
            "example": "sr, language"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "results": null,
                  "status": "ok",
                  "error-message": ""
                }
              }
            }
          },
          "422": {
            "description": "no audio has been provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "errorMessage": ""
                }
              }
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Metrics",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": "# HELP sestek_current_sessions_total number of opened and not yet closed websocket sessions\n# TYPE sestek_current_sessions_total gauge\nsestek_current_sessions_total{protocol=\"websocket\"} 0.000000\n# HELP sestek_served_sessions_total number of sessions that has been closed\n# TYPE sestek_served_sessions_total counter\nsestek_served_sessions_total{protocol=\"websocket\"} 13.000000\n# HELP sestek_wagtail_requested_project_total total number of times a project has been used\n# TYPE sestek_wagtail_requested_project_total counter\nsestek_wagtail_requested_project_total{project-name=\"Default_http-diarize-lang-sr\"} 1.000000\n# HELP sestek_wagtail_requested_project_total total number of times a project has been used\n# TYPE sestek_wagtail_requested_project_total counter\nsestek_wagtail_requested_project_total{project-name=\"Default_lang1\"} 1.000000\n# HELP sestek_wagtail_requested_project_total total number of times a project has been used\n# TYPE sestek_wagtail_requested_project_total counter\nsestek_wagtail_requested_project_total{project-name=\"Default_stream-wasp\"} 12.000000\n# HELP sestek_wagtail_current_project_session_total current open number of sessions for a project\n# TYPE sestek_wagtail_current_project_session_total counter\nsestek_wagtail_current_project_session_total{project-name=\"lang1\"} 0.000000\n# HELP sestek_wagtail_current_project_session_total current open number of sessions for a project\n# TYPE sestek_wagtail_current_project_session_total counter\nsestek_wagtail_current_project_session_total{project-name=\"stream-wasp\"} 0.000000\n"
              }
            }
          }
        }
      }
    }
  }
}